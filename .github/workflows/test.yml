name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:

env:
  GO_VERSION_MATRIX: "1.21,1.22,1.23"

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.21, 1.22, 1.23]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Verify dependencies
      run: go mod verify

    - name: Build
      run: go build -v ./...

    - name: Run unit tests
      run: make test

    - name: Run integration tests
      run: go test -tags=integration -race ./test/integration/...
      if: matrix.os == 'ubuntu-latest'

    - name: Run security tests
      run: go test -tags=security -race ./test/security/...
      if: matrix.os == 'ubuntu-latest'

    - name: Run performance tests
      run: go test -tags=performance -race ./test/performance/...
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'

    - name: Generate coverage report
      run: make test-coverage
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m --out-format=colored-line-number
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
        cache: true

    - name: Run Gosec Security Scanner
      id: gosec
      run: |
        # Install gosec from the correct repository
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest || echo "Failed to install gosec"
        # Run gosec and create SARIF file, ensuring file exists even on failure
        gosec -no-fail -fmt sarif -out gosec.sarif ./... || echo "Gosec scan completed with issues"
        # Verify SARIF file was created
        if [ -f gosec.sarif ]; then
          echo "sarif_created=true" >> $GITHUB_OUTPUT
          echo "SARIF file created successfully"
        else
          echo "sarif_created=false" >> $GITHUB_OUTPUT
          echo "SARIF file not created, creating empty one"
          echo '{"version":"2.1.0","runs":[]}' > gosec.sarif
        fi
      continue-on-error: true

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: steps.gosec.outputs.sarif_created == 'true' || always()
      with:
        sarif_file: gosec.sarif
      continue-on-error: true

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
      continue-on-error: true

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
        cache: true

    - name: Check for known vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
      continue-on-error: true

    - name: Run Nancy (dependency vulnerability scanner)
      run: |
        go list -json -deps ./... | docker run --rm -i sonatypecommunity/nancy:latest sleuth
      continue-on-error: true

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
        cache: true

    - name: Test build for multiple architectures
      run: |
        GOOS=linux GOARCH=amd64 go build -v ./cmd/hivemind
        GOOS=linux GOARCH=arm64 go build -v ./cmd/hivemind
        GOOS=windows GOARCH=amd64 go build -v ./cmd/hivemind
        GOOS=windows GOARCH=arm64 go build -v ./cmd/hivemind
        GOOS=darwin GOARCH=amd64 go build -v ./cmd/hivemind
        GOOS=darwin GOARCH=arm64 go build -v ./cmd/hivemind

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security, dependency-check, build-test]
    if: always()
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Test | ${{ needs.build-test.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.dependency-check.result }}" == "success" && "${{ needs.build-test.result }}" == "success" ]]; then
          echo "✅ All tests passed! Ready for release." >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "❌ Some tests failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi